package graphql

// Code generated by graphql-codegen-golang ; DO NOT EDIT.

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"
)

type Client struct {
	*http.Client
	Url string
}

// NewClient creates a GraphQL client ready to use.
func NewClient(url string) *Client {
	return &Client{
		Client: &http.Client{},
		Url:    url,
	}
}

type GraphQLOperation struct {
	Query         string          `json:"query"`
	OperationName string          `json:"operationName,omitempty"`
	Variables     json.RawMessage `json:"variables,omitempty"`
}

type GraphQLResponse struct {
	Data   json.RawMessage `json:"data,omitempty"`
	Errors []GraphQLError  `json:"errors,omitempty"`
}

type GraphQLError map[string]interface{}

func (err GraphQLError) Error() string {
	return fmt.Sprintf("graphql: %v", map[string]interface{}(err))
}

func (resp *GraphQLResponse) Error() string {
	if len(resp.Errors) == 0 {
		return ""
	}
	errs := strings.Builder{}
	for _, err := range resp.Errors {
		errs.WriteString(err.Error())
		errs.WriteString("\n")
	}
	return errs.String()
}

func execute(client *http.Client, req *http.Request) (*GraphQLResponse, error) {
	if client == nil {
		client = http.DefaultClient
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	body, err := ioutil.ReadAll(resp.Body)
	resp.Body.Close()
	if err != nil {
		return nil, err
	}
	return unmarshalGraphQLReponse(body)
}

func unmarshalGraphQLReponse(b []byte) (*GraphQLResponse, error) {
	resp := GraphQLResponse{}
	if err := json.Unmarshal(b, &resp); err != nil {
		return nil, err
	}
	if len(resp.Errors) > 0 {
		return &resp, &resp
	}
	return &resp, nil
}

//
// mutation CreateNote($textContent: String!)
//

type CreateNoteVariables struct {
	TextContent String `json:"textContent"`
}

type CreateNoteResponse struct {
	CreateNote struct {
		ClientMutationId string `json:"clientMutationId"`
	} `json:"createNote"`
}

type CreateNoteRequest struct {
	*http.Request
}

func NewCreateNoteRequest(url string, vars *CreateNoteVariables) (*CreateNoteRequest, error) {
	variables, err := json.Marshal(vars)
	if err != nil {
		return nil, err
	}
	b, err := json.Marshal(&GraphQLOperation{
		Variables: variables,
		Query: `mutation CreateNote($textContent: String!) {
  createNote(input: {note: {textContent: $textContent}}) {
    clientMutationId
  }
}`,
	})
	if err != nil {
		return nil, err
	}
	req, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(b))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	return &CreateNoteRequest{req}, nil
}

func (req *CreateNoteRequest) Execute(client *http.Client) (*CreateNoteResponse, error) {
	resp, err := execute(client, req.Request)
	if err != nil {
		return nil, err
	}
	var result CreateNoteResponse
	if err := json.Unmarshal(resp.Data, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func CreateNote(url string, client *http.Client, vars *CreateNoteVariables) (*CreateNoteResponse, error) {
	req, err := NewCreateNoteRequest(url, vars)
	if err != nil {
		return nil, err
	}
	beforeExecute(req.Request)
	return req.Execute(client)
}

func (client *Client) CreateNote(vars *CreateNoteVariables) (*CreateNoteResponse, error) {
	return CreateNote(client.Url, client.Client, vars)
}

//
// query ListNotes
//

type ListNotesResponse struct {
	NotesList *[]struct {
		ID               string `json:"id"`
		ShortTextContent string `json:"shortTextContent"`
		LastUpdatedTs    string `json:"lastUpdatedTs"`
	} `json:"notesList"`
}

type ListNotesRequest struct {
	*http.Request
}

func NewListNotesRequest(url string) (*ListNotesRequest, error) {
	b, err := json.Marshal(&GraphQLOperation{
		Query: `query ListNotes {
  notesList(orderBy: LAST_UPDATED_TS_DESC) {
    id
    shortTextContent
    lastUpdatedTs
  }
}`,
	})
	if err != nil {
		return nil, err
	}
	req, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(b))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	return &ListNotesRequest{req}, nil
}

func (req *ListNotesRequest) Execute(client *http.Client) (*ListNotesResponse, error) {
	resp, err := execute(client, req.Request)
	if err != nil {
		return nil, err
	}
	var result ListNotesResponse
	if err := json.Unmarshal(resp.Data, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func ListNotes(url string, client *http.Client) (*ListNotesResponse, error) {
	req, err := NewListNotesRequest(url)
	if err != nil {
		return nil, err
	}
	beforeExecute(req.Request)
	return req.Execute(client)
}

func (client *Client) ListNotes() (*ListNotesResponse, error) {
	return ListNotes(client.Url, client.Client)
}

//
// query NoteTextContent($id: UUID!)
//

type NoteTextContentVariables struct {
	ID UUID `json:"id"`
}

type NoteTextContentResponse struct {
	Note struct {
		TextContent string `json:"textContent"`
	} `json:"note"`
}

type NoteTextContentRequest struct {
	*http.Request
}

func NewNoteTextContentRequest(url string, vars *NoteTextContentVariables) (*NoteTextContentRequest, error) {
	variables, err := json.Marshal(vars)
	if err != nil {
		return nil, err
	}
	b, err := json.Marshal(&GraphQLOperation{
		Variables: variables,
		Query: `query NoteTextContent($id: UUID!) {
  note(id: $id) {
    textContent
  }
}`,
	})
	if err != nil {
		return nil, err
	}
	req, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(b))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	return &NoteTextContentRequest{req}, nil
}

func (req *NoteTextContentRequest) Execute(client *http.Client) (*NoteTextContentResponse, error) {
	resp, err := execute(client, req.Request)
	if err != nil {
		return nil, err
	}
	var result NoteTextContentResponse
	if err := json.Unmarshal(resp.Data, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func NoteTextContent(url string, client *http.Client, vars *NoteTextContentVariables) (*NoteTextContentResponse, error) {
	req, err := NewNoteTextContentRequest(url, vars)
	if err != nil {
		return nil, err
	}
	beforeExecute(req.Request)
	return req.Execute(client)
}

func (client *Client) NoteTextContent(vars *NoteTextContentVariables) (*NoteTextContentResponse, error) {
	return NoteTextContent(client.Url, client.Client, vars)
}

//
// mutation WorkspaceKeepalive($workspaceId: String!)
//

type WorkspaceKeepaliveVariables struct {
	WorkspaceId String `json:"workspaceId"`
}

type WorkspaceKeepaliveResponse struct {
	WorkspaceKeepalive struct {
		ClientMutationId string `json:"clientMutationId"`
	} `json:"workspaceKeepalive"`
}

type WorkspaceKeepaliveRequest struct {
	*http.Request
}

func NewWorkspaceKeepaliveRequest(url string, vars *WorkspaceKeepaliveVariables) (*WorkspaceKeepaliveRequest, error) {
	variables, err := json.Marshal(vars)
	if err != nil {
		return nil, err
	}
	b, err := json.Marshal(&GraphQLOperation{
		Variables: variables,
		Query: `mutation WorkspaceKeepalive($workspaceId: String!) {
  workspaceKeepalive(input: {workspaceId: $workspaceId}) {
    clientMutationId
  }
}`,
	})
	if err != nil {
		return nil, err
	}
	req, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(b))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	return &WorkspaceKeepaliveRequest{req}, nil
}

func (req *WorkspaceKeepaliveRequest) Execute(client *http.Client) (*WorkspaceKeepaliveResponse, error) {
	resp, err := execute(client, req.Request)
	if err != nil {
		return nil, err
	}
	var result WorkspaceKeepaliveResponse
	if err := json.Unmarshal(resp.Data, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func WorkspaceKeepalive(url string, client *http.Client, vars *WorkspaceKeepaliveVariables) (*WorkspaceKeepaliveResponse, error) {
	req, err := NewWorkspaceKeepaliveRequest(url, vars)
	if err != nil {
		return nil, err
	}
	beforeExecute(req.Request)
	return req.Execute(client)
}

func (client *Client) WorkspaceKeepalive(vars *WorkspaceKeepaliveVariables) (*WorkspaceKeepaliveResponse, error) {
	return WorkspaceKeepalive(client.Url, client.Client, vars)
}

//
// Scalars
//

type Int int32
type Float float64
type Boolean bool
type String string
type ID string
type Cursor string
type Datetime string
type JSON string
type UUID string

//
// Enums
//

type ApiKeysOrderBy string

const (
	ApiKeysOrderByNATURAL ApiKeysOrderBy = "NATURAL"
)

type DebugsOrderBy string

const (
	DebugsOrderByNATURAL DebugsOrderBy = "NATURAL"
)

type NotesOrderBy string

const (
	NotesOrderByIDASC             NotesOrderBy = "ID_ASC"
	NotesOrderByIDDESC            NotesOrderBy = "ID_DESC"
	NotesOrderByLASTUPDATEDTSASC  NotesOrderBy = "LAST_UPDATED_TS_ASC"
	NotesOrderByLASTUPDATEDTSDESC NotesOrderBy = "LAST_UPDATED_TS_DESC"
	NotesOrderByNATURAL           NotesOrderBy = "NATURAL"
	NotesOrderByPRIMARYKEYASC     NotesOrderBy = "PRIMARY_KEY_ASC"
	NotesOrderByPRIMARYKEYDESC    NotesOrderBy = "PRIMARY_KEY_DESC"
	NotesOrderByUSERIDASC         NotesOrderBy = "USER_ID_ASC"
	NotesOrderByUSERIDDESC        NotesOrderBy = "USER_ID_DESC"
)

type OrganizationMembershipsOrderBy string

const (
	OrganizationMembershipsOrderByIDASC              OrganizationMembershipsOrderBy = "ID_ASC"
	OrganizationMembershipsOrderByIDDESC             OrganizationMembershipsOrderBy = "ID_DESC"
	OrganizationMembershipsOrderByMEMBERNAMEASC      OrganizationMembershipsOrderBy = "MEMBER_NAME_ASC"
	OrganizationMembershipsOrderByMEMBERNAMEDESC     OrganizationMembershipsOrderBy = "MEMBER_NAME_DESC"
	OrganizationMembershipsOrderByNATURAL            OrganizationMembershipsOrderBy = "NATURAL"
	OrganizationMembershipsOrderByORGANIZATIONIDASC  OrganizationMembershipsOrderBy = "ORGANIZATION_ID_ASC"
	OrganizationMembershipsOrderByORGANIZATIONIDDESC OrganizationMembershipsOrderBy = "ORGANIZATION_ID_DESC"
	OrganizationMembershipsOrderByPRIMARYKEYASC      OrganizationMembershipsOrderBy = "PRIMARY_KEY_ASC"
	OrganizationMembershipsOrderByPRIMARYKEYDESC     OrganizationMembershipsOrderBy = "PRIMARY_KEY_DESC"
	OrganizationMembershipsOrderByUSERIDASC          OrganizationMembershipsOrderBy = "USER_ID_ASC"
	OrganizationMembershipsOrderByUSERIDDESC         OrganizationMembershipsOrderBy = "USER_ID_DESC"
)

type OrganizationsOrderBy string

const (
	OrganizationsOrderByIDASC          OrganizationsOrderBy = "ID_ASC"
	OrganizationsOrderByIDDESC         OrganizationsOrderBy = "ID_DESC"
	OrganizationsOrderByNATURAL        OrganizationsOrderBy = "NATURAL"
	OrganizationsOrderByPRIMARYKEYASC  OrganizationsOrderBy = "PRIMARY_KEY_ASC"
	OrganizationsOrderByPRIMARYKEYDESC OrganizationsOrderBy = "PRIMARY_KEY_DESC"
	OrganizationsOrderBySLUGASC        OrganizationsOrderBy = "SLUG_ASC"
	OrganizationsOrderBySLUGDESC       OrganizationsOrderBy = "SLUG_DESC"
)

type UserAuthenticationsOrderBy string

const (
	UserAuthenticationsOrderByIDASC          UserAuthenticationsOrderBy = "ID_ASC"
	UserAuthenticationsOrderByIDDESC         UserAuthenticationsOrderBy = "ID_DESC"
	UserAuthenticationsOrderByNATURAL        UserAuthenticationsOrderBy = "NATURAL"
	UserAuthenticationsOrderByPRIMARYKEYASC  UserAuthenticationsOrderBy = "PRIMARY_KEY_ASC"
	UserAuthenticationsOrderByPRIMARYKEYDESC UserAuthenticationsOrderBy = "PRIMARY_KEY_DESC"
	UserAuthenticationsOrderBySERVICEASC     UserAuthenticationsOrderBy = "SERVICE_ASC"
	UserAuthenticationsOrderBySERVICEDESC    UserAuthenticationsOrderBy = "SERVICE_DESC"
	UserAuthenticationsOrderByUSERIDASC      UserAuthenticationsOrderBy = "USER_ID_ASC"
	UserAuthenticationsOrderByUSERIDDESC     UserAuthenticationsOrderBy = "USER_ID_DESC"
)

type UserEmailsOrderBy string

const (
	UserEmailsOrderByIDASC          UserEmailsOrderBy = "ID_ASC"
	UserEmailsOrderByIDDESC         UserEmailsOrderBy = "ID_DESC"
	UserEmailsOrderByISPRIMARYASC   UserEmailsOrderBy = "IS_PRIMARY_ASC"
	UserEmailsOrderByISPRIMARYDESC  UserEmailsOrderBy = "IS_PRIMARY_DESC"
	UserEmailsOrderByNATURAL        UserEmailsOrderBy = "NATURAL"
	UserEmailsOrderByPRIMARYKEYASC  UserEmailsOrderBy = "PRIMARY_KEY_ASC"
	UserEmailsOrderByPRIMARYKEYDESC UserEmailsOrderBy = "PRIMARY_KEY_DESC"
	UserEmailsOrderByUSERIDASC      UserEmailsOrderBy = "USER_ID_ASC"
	UserEmailsOrderByUSERIDDESC     UserEmailsOrderBy = "USER_ID_DESC"
)

type UsersOrderBy string

const (
	UsersOrderByIDASC          UsersOrderBy = "ID_ASC"
	UsersOrderByIDDESC         UsersOrderBy = "ID_DESC"
	UsersOrderByNATURAL        UsersOrderBy = "NATURAL"
	UsersOrderByPRIMARYKEYASC  UsersOrderBy = "PRIMARY_KEY_ASC"
	UsersOrderByPRIMARYKEYDESC UsersOrderBy = "PRIMARY_KEY_DESC"
	UsersOrderByUSERNAMEASC    UsersOrderBy = "USERNAME_ASC"
	UsersOrderByUSERNAMEDESC   UsersOrderBy = "USERNAME_DESC"
)

type WorkspacesOrderBy string

const (
	WorkspacesOrderByNATURAL        WorkspacesOrderBy = "NATURAL"
	WorkspacesOrderByPRIMARYKEYASC  WorkspacesOrderBy = "PRIMARY_KEY_ASC"
	WorkspacesOrderByPRIMARYKEYDESC WorkspacesOrderBy = "PRIMARY_KEY_DESC"
	WorkspacesOrderByUSERIDASC      WorkspacesOrderBy = "USER_ID_ASC"
	WorkspacesOrderByUSERIDDESC     WorkspacesOrderBy = "USER_ID_DESC"
)

//
// Inputs
//

type AcceptInvitationToOrganizationInput struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	Code             *String `json:"code,omitempty"`
	InvitationId     UUID    `json:"invitationId"`
}

type BooleanFilter struct {
	DistinctFrom         *Boolean   `json:"distinctFrom,omitempty"`
	EqualTo              *Boolean   `json:"equalTo,omitempty"`
	GreaterThan          *Boolean   `json:"greaterThan,omitempty"`
	GreaterThanOrEqualTo *Boolean   `json:"greaterThanOrEqualTo,omitempty"`
	In                   *[]Boolean `json:"in,omitempty"`
	IsNull               *Boolean   `json:"isNull,omitempty"`
	LessThan             *Boolean   `json:"lessThan,omitempty"`
	LessThanOrEqualTo    *Boolean   `json:"lessThanOrEqualTo,omitempty"`
	NotDistinctFrom      *Boolean   `json:"notDistinctFrom,omitempty"`
	NotEqualTo           *Boolean   `json:"notEqualTo,omitempty"`
	NotIn                *[]Boolean `json:"notIn,omitempty"`
}

type ChangePasswordInput struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	NewPassword      String  `json:"newPassword"`
	OldPassword      String  `json:"oldPassword"`
}

type ConfirmAccountDeletionInput struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	Token            String  `json:"token"`
}

type CreateApiKeyInput struct {
	ApiKeyName       String  `json:"apiKeyName"`
	ClientMutationId *String `json:"clientMutationId,omitempty"`
}

type CreateNoteInput struct {
	ClientMutationId *String   `json:"clientMutationId,omitempty"`
	Note             NoteInput `json:"note"`
}

type CreateOrganizationInput struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	Name             String  `json:"name"`
	Slug             String  `json:"slug"`
}

type CreateUserEmailInput struct {
	ClientMutationId *String        `json:"clientMutationId,omitempty"`
	UserEmail        UserEmailInput `json:"userEmail"`
}

type DatetimeFilter struct {
	DistinctFrom         *Datetime   `json:"distinctFrom,omitempty"`
	EqualTo              *Datetime   `json:"equalTo,omitempty"`
	GreaterThan          *Datetime   `json:"greaterThan,omitempty"`
	GreaterThanOrEqualTo *Datetime   `json:"greaterThanOrEqualTo,omitempty"`
	In                   *[]Datetime `json:"in,omitempty"`
	IsNull               *Boolean    `json:"isNull,omitempty"`
	LessThan             *Datetime   `json:"lessThan,omitempty"`
	LessThanOrEqualTo    *Datetime   `json:"lessThanOrEqualTo,omitempty"`
	NotDistinctFrom      *Datetime   `json:"notDistinctFrom,omitempty"`
	NotEqualTo           *Datetime   `json:"notEqualTo,omitempty"`
	NotIn                *[]Datetime `json:"notIn,omitempty"`
}

type DeleteApiKeyInput struct {
	ApiKeyName       String  `json:"apiKeyName"`
	ClientMutationId *String `json:"clientMutationId,omitempty"`
}

type DeleteNoteInput struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	ID               UUID    `json:"id"`
}

type DeleteOrganizationInput struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	OrganizationId   UUID    `json:"organizationId"`
}

type DeleteUserAuthenticationInput struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	ID               UUID    `json:"id"`
}

type DeleteUserEmailInput struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	ID               UUID    `json:"id"`
}

type ForgotPasswordInput struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	Email            String  `json:"email"`
}

type InviteToOrganizationInput struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	Email            *String `json:"email,omitempty"`
	OrganizationId   UUID    `json:"organizationId"`
	Username         *String `json:"username,omitempty"`
}

type LoginInput struct {
	Password String `json:"password"`
	Username String `json:"username"`
}

type MakeEmailPrimaryInput struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	EmailId          UUID    `json:"emailId"`
}

type NoteCondition struct {
	ID            *UUID     `json:"id,omitempty"`
	LastUpdatedTs *Datetime `json:"lastUpdatedTs,omitempty"`
	UserId        *UUID     `json:"userId,omitempty"`
}

type NoteFilter struct {
	And           *[]NoteFilter   `json:"and,omitempty"`
	ID            *UUIDFilter     `json:"id,omitempty"`
	LastUpdatedTs *DatetimeFilter `json:"lastUpdatedTs,omitempty"`
	Not           *NoteFilter     `json:"not,omitempty"`
	Or            *[]NoteFilter   `json:"or,omitempty"`
	UserId        *UUIDFilter     `json:"userId,omitempty"`
}

type NoteInput struct {
	ID               *UUID     `json:"id,omitempty"`
	LastUpdatedTs    *Datetime `json:"lastUpdatedTs,omitempty"`
	ShortTextContent *String   `json:"shortTextContent,omitempty"`
	TextContent      String    `json:"textContent"`
	UserId           *UUID     `json:"userId,omitempty"`
}

type NotePatch struct {
	ID               *UUID     `json:"id,omitempty"`
	LastUpdatedTs    *Datetime `json:"lastUpdatedTs,omitempty"`
	ShortTextContent *String   `json:"shortTextContent,omitempty"`
	TextContent      *String   `json:"textContent,omitempty"`
	UserId           *UUID     `json:"userId,omitempty"`
}

type OrganizationCondition struct {
	ID   *UUID   `json:"id,omitempty"`
	Slug *String `json:"slug,omitempty"`
}

type OrganizationFilter struct {
	And                         *[]OrganizationFilter `json:"and,omitempty"`
	CurrentUserIsBillingContact *BooleanFilter        `json:"currentUserIsBillingContact,omitempty"`
	CurrentUserIsOwner          *BooleanFilter        `json:"currentUserIsOwner,omitempty"`
	ID                          *UUIDFilter           `json:"id,omitempty"`
	Not                         *OrganizationFilter   `json:"not,omitempty"`
	Or                          *[]OrganizationFilter `json:"or,omitempty"`
	Slug                        *StringFilter         `json:"slug,omitempty"`
}

type OrganizationMembershipCondition struct {
	ID             *UUID `json:"id,omitempty"`
	OrganizationId *UUID `json:"organizationId,omitempty"`
	UserId         *UUID `json:"userId,omitempty"`
}

type OrganizationMembershipFilter struct {
	And            *[]OrganizationMembershipFilter `json:"and,omitempty"`
	ID             *UUIDFilter                     `json:"id,omitempty"`
	Not            *OrganizationMembershipFilter   `json:"not,omitempty"`
	Or             *[]OrganizationMembershipFilter `json:"or,omitempty"`
	OrganizationId *UUIDFilter                     `json:"organizationId,omitempty"`
	UserId         *UUIDFilter                     `json:"userId,omitempty"`
}

type OrganizationPatch struct {
	Name *String `json:"name,omitempty"`
	Slug *String `json:"slug,omitempty"`
}

type RefreshTokenInput struct {
	Token String `json:"token"`
}

type RegisterInput struct {
	AvatarUrl *String `json:"avatarUrl,omitempty"`
	Email     String  `json:"email"`
	Name      *String `json:"name,omitempty"`
	Password  String  `json:"password"`
	Username  String  `json:"username"`
}

type RemoveFromOrganizationInput struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	OrganizationId   UUID    `json:"organizationId"`
	UserId           UUID    `json:"userId"`
}

type RequestAccountDeletionInput struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
}

type ResendEmailVerificationCodeInput struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	EmailId          UUID    `json:"emailId"`
}

type ResetPasswordInput struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	NewPassword      String  `json:"newPassword"`
	ResetToken       String  `json:"resetToken"`
	UserId           UUID    `json:"userId"`
}

type StringFilter struct {
	DistinctFrom                    *String   `json:"distinctFrom,omitempty"`
	DistinctFromInsensitive         *String   `json:"distinctFromInsensitive,omitempty"`
	EndsWith                        *String   `json:"endsWith,omitempty"`
	EndsWithInsensitive             *String   `json:"endsWithInsensitive,omitempty"`
	EqualTo                         *String   `json:"equalTo,omitempty"`
	EqualToInsensitive              *String   `json:"equalToInsensitive,omitempty"`
	GreaterThan                     *String   `json:"greaterThan,omitempty"`
	GreaterThanInsensitive          *String   `json:"greaterThanInsensitive,omitempty"`
	GreaterThanOrEqualTo            *String   `json:"greaterThanOrEqualTo,omitempty"`
	GreaterThanOrEqualToInsensitive *String   `json:"greaterThanOrEqualToInsensitive,omitempty"`
	In                              *[]String `json:"in,omitempty"`
	Includes                        *String   `json:"includes,omitempty"`
	IncludesInsensitive             *String   `json:"includesInsensitive,omitempty"`
	InInsensitive                   *[]String `json:"inInsensitive,omitempty"`
	IsNull                          *Boolean  `json:"isNull,omitempty"`
	LessThan                        *String   `json:"lessThan,omitempty"`
	LessThanInsensitive             *String   `json:"lessThanInsensitive,omitempty"`
	LessThanOrEqualTo               *String   `json:"lessThanOrEqualTo,omitempty"`
	LessThanOrEqualToInsensitive    *String   `json:"lessThanOrEqualToInsensitive,omitempty"`
	Like                            *String   `json:"like,omitempty"`
	LikeInsensitive                 *String   `json:"likeInsensitive,omitempty"`
	NotDistinctFrom                 *String   `json:"notDistinctFrom,omitempty"`
	NotDistinctFromInsensitive      *String   `json:"notDistinctFromInsensitive,omitempty"`
	NotEndsWith                     *String   `json:"notEndsWith,omitempty"`
	NotEndsWithInsensitive          *String   `json:"notEndsWithInsensitive,omitempty"`
	NotEqualTo                      *String   `json:"notEqualTo,omitempty"`
	NotEqualToInsensitive           *String   `json:"notEqualToInsensitive,omitempty"`
	NotIn                           *[]String `json:"notIn,omitempty"`
	NotIncludes                     *String   `json:"notIncludes,omitempty"`
	NotIncludesInsensitive          *String   `json:"notIncludesInsensitive,omitempty"`
	NotInInsensitive                *[]String `json:"notInInsensitive,omitempty"`
	NotLike                         *String   `json:"notLike,omitempty"`
	NotLikeInsensitive              *String   `json:"notLikeInsensitive,omitempty"`
	NotStartsWith                   *String   `json:"notStartsWith,omitempty"`
	NotStartsWithInsensitive        *String   `json:"notStartsWithInsensitive,omitempty"`
	StartsWith                      *String   `json:"startsWith,omitempty"`
	StartsWithInsensitive           *String   `json:"startsWithInsensitive,omitempty"`
}

type TransferOrganizationBillingContactInput struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	OrganizationId   UUID    `json:"organizationId"`
	UserId           UUID    `json:"userId"`
}

type TransferOrganizationOwnershipInput struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	OrganizationId   UUID    `json:"organizationId"`
	UserId           UUID    `json:"userId"`
}

type UpdateNoteInput struct {
	ClientMutationId *String   `json:"clientMutationId,omitempty"`
	ID               UUID      `json:"id"`
	Patch            NotePatch `json:"patch"`
}

type UpdateOrganizationInput struct {
	ClientMutationId *String           `json:"clientMutationId,omitempty"`
	ID               UUID              `json:"id"`
	Patch            OrganizationPatch `json:"patch"`
}

type UpdateUserInput struct {
	ClientMutationId *String   `json:"clientMutationId,omitempty"`
	ID               UUID      `json:"id"`
	Patch            UserPatch `json:"patch"`
}

type UpdateWorkspaceInput struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	Data             JSON    `json:"data"`
	WorkspaceId      String  `json:"workspaceId"`
}

type UserAuthenticationCondition struct {
	ID      *UUID   `json:"id,omitempty"`
	Service *String `json:"service,omitempty"`
	UserId  *UUID   `json:"userId,omitempty"`
}

type UserAuthenticationFilter struct {
	And     *[]UserAuthenticationFilter `json:"and,omitempty"`
	ID      *UUIDFilter                 `json:"id,omitempty"`
	Not     *UserAuthenticationFilter   `json:"not,omitempty"`
	Or      *[]UserAuthenticationFilter `json:"or,omitempty"`
	Service *StringFilter               `json:"service,omitempty"`
	UserId  *UUIDFilter                 `json:"userId,omitempty"`
}

type UserEmailCondition struct {
	ID        *UUID    `json:"id,omitempty"`
	IsPrimary *Boolean `json:"isPrimary,omitempty"`
	UserId    *UUID    `json:"userId,omitempty"`
}

type UserEmailFilter struct {
	And       *[]UserEmailFilter `json:"and,omitempty"`
	ID        *UUIDFilter        `json:"id,omitempty"`
	IsPrimary *BooleanFilter     `json:"isPrimary,omitempty"`
	Not       *UserEmailFilter   `json:"not,omitempty"`
	Or        *[]UserEmailFilter `json:"or,omitempty"`
	UserId    *UUIDFilter        `json:"userId,omitempty"`
}

type UserEmailInput struct {
	Email String `json:"email"`
}

type UserPatch struct {
	AvatarUrl *String `json:"avatarUrl,omitempty"`
	Name      *String `json:"name,omitempty"`
	Username  *String `json:"username,omitempty"`
}

type UUIDFilter struct {
	DistinctFrom         *UUID    `json:"distinctFrom,omitempty"`
	EqualTo              *UUID    `json:"equalTo,omitempty"`
	GreaterThan          *UUID    `json:"greaterThan,omitempty"`
	GreaterThanOrEqualTo *UUID    `json:"greaterThanOrEqualTo,omitempty"`
	In                   *[]UUID  `json:"in,omitempty"`
	IsNull               *Boolean `json:"isNull,omitempty"`
	LessThan             *UUID    `json:"lessThan,omitempty"`
	LessThanOrEqualTo    *UUID    `json:"lessThanOrEqualTo,omitempty"`
	NotDistinctFrom      *UUID    `json:"notDistinctFrom,omitempty"`
	NotEqualTo           *UUID    `json:"notEqualTo,omitempty"`
	NotIn                *[]UUID  `json:"notIn,omitempty"`
}

type VerifyEmailInput struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	Token            String  `json:"token"`
	UserEmailId      UUID    `json:"userEmailId"`
}

type VerifyTokenInput struct {
	Token String `json:"token"`
}

type WorkspaceCondition struct {
	UserId *UUID `json:"userId,omitempty"`
}

type WorkspaceFilter struct {
	And    *[]WorkspaceFilter `json:"and,omitempty"`
	Not    *WorkspaceFilter   `json:"not,omitempty"`
	Or     *[]WorkspaceFilter `json:"or,omitempty"`
	UserId *UUIDFilter        `json:"userId,omitempty"`
}

type WorkspaceKeepaliveInput struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	WorkspaceId      String  `json:"workspaceId"`
}

//
// Objects
//

type AcceptInvitationToOrganizationPayload struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	Query            *Query  `json:"query,omitempty"`
}

type ApiKey struct {
	ApiKeyGeneratedTs *Datetime `json:"apiKeyGeneratedTs,omitempty"`
	Name              *String   `json:"name,omitempty"`
}

type ApiKeysConnection struct {
	Edges      *[]ApiKeysEdge `json:"edges,omitempty"`
	Nodes      *[]ApiKey      `json:"nodes,omitempty"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount Int            `json:"totalCount"`
}

type ApiKeysEdge struct {
	Cursor *Cursor `json:"cursor,omitempty"`
	Node   ApiKey  `json:"node"`
}

type AppLoginPayload struct {
	Jwt String `json:"jwt"`
}

type AppRegisterPayload struct {
	Jwt String `json:"jwt"`
}

type ChangePasswordPayload struct {
	ClientMutationId *String  `json:"clientMutationId,omitempty"`
	Query            *Query   `json:"query,omitempty"`
	Success          *Boolean `json:"success,omitempty"`
}

type ConfirmAccountDeletionPayload struct {
	ClientMutationId *String  `json:"clientMutationId,omitempty"`
	Query            *Query   `json:"query,omitempty"`
	Success          *Boolean `json:"success,omitempty"`
}

type CreateApiKeyPayload struct {
	ClientMutationId   *String             `json:"clientMutationId,omitempty"`
	CreateApiKeyResult *CreateApiKeyResult `json:"createApiKeyResult,omitempty"`
	Query              *Query              `json:"query,omitempty"`
}

type CreateApiKeyResult struct {
	ApiKey *String `json:"apiKey,omitempty"`
}

type CreateNotePayload struct {
	ClientMutationId *String    `json:"clientMutationId,omitempty"`
	Note             *Note      `json:"note,omitempty"`
	NoteEdge         *NotesEdge `json:"noteEdge,omitempty"`
	Query            *Query     `json:"query,omitempty"`
	User             *User      `json:"user,omitempty"`
}

type CreateOrganizationPayload struct {
	ClientMutationId *String            `json:"clientMutationId,omitempty"`
	Organization     *Organization      `json:"organization,omitempty"`
	OrganizationEdge *OrganizationsEdge `json:"organizationEdge,omitempty"`
	Query            *Query             `json:"query,omitempty"`
}

type CreateUserEmailPayload struct {
	ClientMutationId *String         `json:"clientMutationId,omitempty"`
	Query            *Query          `json:"query,omitempty"`
	User             *User           `json:"user,omitempty"`
	UserEmail        *UserEmail      `json:"userEmail,omitempty"`
	UserEmailEdge    *UserEmailsEdge `json:"userEmailEdge,omitempty"`
}

type Debug struct {
	ApiKeyGeneratedTs *Datetime `json:"apiKeyGeneratedTs,omitempty"`
	Name              *String   `json:"name,omitempty"`
	UserId            *UUID     `json:"userId,omitempty"`
	Useridsess        *UUID     `json:"useridsess,omitempty"`
}

type DebugsConnection struct {
	Edges      *[]DebugsEdge `json:"edges,omitempty"`
	Nodes      *[]Debug      `json:"nodes,omitempty"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount Int           `json:"totalCount"`
}

type DebugsEdge struct {
	Cursor *Cursor `json:"cursor,omitempty"`
	Node   Debug   `json:"node"`
}

type DeleteApiKeyPayload struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	Query            *Query  `json:"query,omitempty"`
}

type DeleteNotePayload struct {
	ClientMutationId  *String    `json:"clientMutationId,omitempty"`
	DeletedNoteNodeId *ID        `json:"deletedNoteNodeId,omitempty"`
	Note              *Note      `json:"note,omitempty"`
	NoteEdge          *NotesEdge `json:"noteEdge,omitempty"`
	Query             *Query     `json:"query,omitempty"`
	User              *User      `json:"user,omitempty"`
}

type DeleteOrganizationPayload struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	Query            *Query  `json:"query,omitempty"`
}

type DeleteUserAuthenticationPayload struct {
	ClientMutationId                *String             `json:"clientMutationId,omitempty"`
	DeletedUserAuthenticationNodeId *ID                 `json:"deletedUserAuthenticationNodeId,omitempty"`
	Query                           *Query              `json:"query,omitempty"`
	User                            *User               `json:"user,omitempty"`
	UserAuthentication              *UserAuthentication `json:"userAuthentication,omitempty"`
}

type DeleteUserEmailPayload struct {
	ClientMutationId       *String         `json:"clientMutationId,omitempty"`
	DeletedUserEmailNodeId *ID             `json:"deletedUserEmailNodeId,omitempty"`
	Query                  *Query          `json:"query,omitempty"`
	User                   *User           `json:"user,omitempty"`
	UserEmail              *UserEmail      `json:"userEmail,omitempty"`
	UserEmailEdge          *UserEmailsEdge `json:"userEmailEdge,omitempty"`
}

type ForgotPasswordPayload struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	Query            *Query  `json:"query,omitempty"`
}

type InviteToOrganizationPayload struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	Query            *Query  `json:"query,omitempty"`
}

type LoginPayload struct {
	User User `json:"user"`
}

type LogoutPayload struct {
	Success *Boolean `json:"success,omitempty"`
}

type MakeEmailPrimaryPayload struct {
	ClientMutationId *String         `json:"clientMutationId,omitempty"`
	Query            *Query          `json:"query,omitempty"`
	User             *User           `json:"user,omitempty"`
	UserEmail        *UserEmail      `json:"userEmail,omitempty"`
	UserEmailEdge    *UserEmailsEdge `json:"userEmailEdge,omitempty"`
}

type Mutation struct {
	AcceptInvitationToOrganization     *AcceptInvitationToOrganizationPayload     `json:"acceptInvitationToOrganization,omitempty"`
	AppLogin                           *AppLoginPayload                           `json:"appLogin,omitempty"`
	AppRegister                        *AppRegisterPayload                        `json:"appRegister,omitempty"`
	ChangePassword                     *ChangePasswordPayload                     `json:"changePassword,omitempty"`
	ConfirmAccountDeletion             *ConfirmAccountDeletionPayload             `json:"confirmAccountDeletion,omitempty"`
	CreateApiKey                       *CreateApiKeyPayload                       `json:"createApiKey,omitempty"`
	CreateNote                         *CreateNotePayload                         `json:"createNote,omitempty"`
	CreateOrganization                 *CreateOrganizationPayload                 `json:"createOrganization,omitempty"`
	CreateUserEmail                    *CreateUserEmailPayload                    `json:"createUserEmail,omitempty"`
	DeleteApiKey                       *DeleteApiKeyPayload                       `json:"deleteApiKey,omitempty"`
	DeleteNote                         *DeleteNotePayload                         `json:"deleteNote,omitempty"`
	DeleteOrganization                 *DeleteOrganizationPayload                 `json:"deleteOrganization,omitempty"`
	DeleteUserAuthentication           *DeleteUserAuthenticationPayload           `json:"deleteUserAuthentication,omitempty"`
	DeleteUserEmail                    *DeleteUserEmailPayload                    `json:"deleteUserEmail,omitempty"`
	ForgotPassword                     *ForgotPasswordPayload                     `json:"forgotPassword,omitempty"`
	InviteToOrganization               *InviteToOrganizationPayload               `json:"inviteToOrganization,omitempty"`
	Login                              *LoginPayload                              `json:"login,omitempty"`
	Logout                             *LogoutPayload                             `json:"logout,omitempty"`
	MakeEmailPrimary                   *MakeEmailPrimaryPayload                   `json:"makeEmailPrimary,omitempty"`
	RefreshToken                       *RefreshTokenPayload                       `json:"refreshToken,omitempty"`
	Register                           *RegisterPayload                           `json:"register,omitempty"`
	RemoveFromOrganization             *RemoveFromOrganizationPayload             `json:"removeFromOrganization,omitempty"`
	RequestAccountDeletion             *RequestAccountDeletionPayload             `json:"requestAccountDeletion,omitempty"`
	ResendEmailVerificationCode        *ResendEmailVerificationCodePayload        `json:"resendEmailVerificationCode,omitempty"`
	ResetPassword                      *ResetPasswordPayload                      `json:"resetPassword,omitempty"`
	TransferOrganizationBillingContact *TransferOrganizationBillingContactPayload `json:"transferOrganizationBillingContact,omitempty"`
	TransferOrganizationOwnership      *TransferOrganizationOwnershipPayload      `json:"transferOrganizationOwnership,omitempty"`
	UpdateNote                         *UpdateNotePayload                         `json:"updateNote,omitempty"`
	UpdateOrganization                 *UpdateOrganizationPayload                 `json:"updateOrganization,omitempty"`
	UpdateUser                         *UpdateUserPayload                         `json:"updateUser,omitempty"`
	UpdateWorkspace                    *UpdateWorkspacePayload                    `json:"updateWorkspace,omitempty"`
	VerifyEmail                        *VerifyEmailPayload                        `json:"verifyEmail,omitempty"`
	VerifyToken                        *VerifyTokenPayload                        `json:"verifyToken,omitempty"`
	WorkspaceKeepalive                 *WorkspaceKeepalivePayload                 `json:"workspaceKeepalive,omitempty"`
}

type Note struct {
	ID               UUID     `json:"id"`
	LastUpdatedTs    Datetime `json:"lastUpdatedTs"`
	ShortTextContent *String  `json:"shortTextContent,omitempty"`
	TextContent      String   `json:"textContent"`
	User             *User    `json:"user,omitempty"`
	UserId           UUID     `json:"userId"`
}

type NotesConnection struct {
	Edges      *[]NotesEdge `json:"edges,omitempty"`
	Nodes      *[]Note      `json:"nodes,omitempty"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount Int          `json:"totalCount"`
}

type NotesEdge struct {
	Cursor *Cursor `json:"cursor,omitempty"`
	Node   Note    `json:"node"`
}

type Organization struct {
	CreatedAt                   Datetime                          `json:"createdAt"`
	CurrentUserIsBillingContact *Boolean                          `json:"currentUserIsBillingContact,omitempty"`
	CurrentUserIsOwner          *Boolean                          `json:"currentUserIsOwner,omitempty"`
	ID                          UUID                              `json:"id"`
	Name                        String                            `json:"name"`
	OrganizationMemberships     OrganizationMembershipsConnection `json:"organizationMemberships"`
	OrganizationMembershipsList *[]OrganizationMembership         `json:"organizationMembershipsList,omitempty"`
	Slug                        String                            `json:"slug"`
}

type OrganizationMembership struct {
	CreatedAt        Datetime      `json:"createdAt"`
	ID               UUID          `json:"id"`
	IsBillingContact Boolean       `json:"isBillingContact"`
	IsOwner          Boolean       `json:"isOwner"`
	Organization     *Organization `json:"organization,omitempty"`
	OrganizationId   UUID          `json:"organizationId"`
	User             *User         `json:"user,omitempty"`
	UserId           UUID          `json:"userId"`
}

type OrganizationMembershipsConnection struct {
	Edges      *[]OrganizationMembershipsEdge `json:"edges,omitempty"`
	Nodes      *[]OrganizationMembership      `json:"nodes,omitempty"`
	PageInfo   PageInfo                       `json:"pageInfo"`
	TotalCount Int                            `json:"totalCount"`
}

type OrganizationMembershipsEdge struct {
	Cursor *Cursor                `json:"cursor,omitempty"`
	Node   OrganizationMembership `json:"node"`
}

type OrganizationsConnection struct {
	Edges      *[]OrganizationsEdge `json:"edges,omitempty"`
	Nodes      *[]Organization      `json:"nodes,omitempty"`
	PageInfo   PageInfo             `json:"pageInfo"`
	TotalCount Int                  `json:"totalCount"`
}

type OrganizationsEdge struct {
	Cursor *Cursor      `json:"cursor,omitempty"`
	Node   Organization `json:"node"`
}

type PageInfo struct {
	EndCursor       *Cursor `json:"endCursor,omitempty"`
	HasNextPage     Boolean `json:"hasNextPage"`
	HasPreviousPage Boolean `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor,omitempty"`
}

type Query struct {
	ApiKeys                   *ApiKeysConnection       `json:"apiKeys,omitempty"`
	ApiKeysList               *[]ApiKey                `json:"apiKeysList,omitempty"`
	CurrentUser               *User                    `json:"currentUser,omitempty"`
	Debugs                    *DebugsConnection        `json:"debugs,omitempty"`
	DebugsList                *[]Debug                 `json:"debugsList,omitempty"`
	Note                      *Note                    `json:"note,omitempty"`
	Notes                     *NotesConnection         `json:"notes,omitempty"`
	NotesList                 *[]Note                  `json:"notesList,omitempty"`
	Organization              *Organization            `json:"organization,omitempty"`
	OrganizationBySlug        *Organization            `json:"organizationBySlug,omitempty"`
	OrganizationForInvitation *Organization            `json:"organizationForInvitation,omitempty"`
	OrganizationMembership    *OrganizationMembership  `json:"organizationMembership,omitempty"`
	Organizations             *OrganizationsConnection `json:"organizations,omitempty"`
	OrganizationsList         *[]Organization          `json:"organizationsList,omitempty"`
	User                      *User                    `json:"user,omitempty"`
	UserAuthentication        *UserAuthentication      `json:"userAuthentication,omitempty"`
	UserByUsername            *User                    `json:"userByUsername,omitempty"`
	UserEmail                 *UserEmail               `json:"userEmail,omitempty"`
	Workspace                 *Workspace               `json:"workspace,omitempty"`
	Workspaces                *WorkspacesConnection    `json:"workspaces,omitempty"`
	WorkspacesList            *[]Workspace             `json:"workspacesList,omitempty"`
}

type RefreshTokenPayload struct {
	Token String `json:"token"`
}

type RegisterPayload struct {
	User User `json:"user"`
}

type RemoveFromOrganizationPayload struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	Query            *Query  `json:"query,omitempty"`
}

type RequestAccountDeletionPayload struct {
	ClientMutationId *String  `json:"clientMutationId,omitempty"`
	Query            *Query   `json:"query,omitempty"`
	Success          *Boolean `json:"success,omitempty"`
}

type ResendEmailVerificationCodePayload struct {
	ClientMutationId *String  `json:"clientMutationId,omitempty"`
	Query            *Query   `json:"query,omitempty"`
	Success          *Boolean `json:"success,omitempty"`
}

type ResetPasswordPayload struct {
	ClientMutationId *String  `json:"clientMutationId,omitempty"`
	Query            *Query   `json:"query,omitempty"`
	Success          *Boolean `json:"success,omitempty"`
}

type Subscription struct {
	ApiKeys                   *ApiKeysConnection       `json:"apiKeys,omitempty"`
	ApiKeysList               *[]ApiKey                `json:"apiKeysList,omitempty"`
	CurrentUser               *User                    `json:"currentUser,omitempty"`
	CurrentUserUpdated        *UserSubscriptionPayload `json:"currentUserUpdated,omitempty"`
	Debugs                    *DebugsConnection        `json:"debugs,omitempty"`
	DebugsList                *[]Debug                 `json:"debugsList,omitempty"`
	Note                      *Note                    `json:"note,omitempty"`
	Notes                     *NotesConnection         `json:"notes,omitempty"`
	NotesList                 *[]Note                  `json:"notesList,omitempty"`
	Organization              *Organization            `json:"organization,omitempty"`
	OrganizationBySlug        *Organization            `json:"organizationBySlug,omitempty"`
	OrganizationForInvitation *Organization            `json:"organizationForInvitation,omitempty"`
	OrganizationMembership    *OrganizationMembership  `json:"organizationMembership,omitempty"`
	Organizations             *OrganizationsConnection `json:"organizations,omitempty"`
	OrganizationsList         *[]Organization          `json:"organizationsList,omitempty"`
	User                      *User                    `json:"user,omitempty"`
	UserAuthentication        *UserAuthentication      `json:"userAuthentication,omitempty"`
	UserByUsername            *User                    `json:"userByUsername,omitempty"`
	UserEmail                 *UserEmail               `json:"userEmail,omitempty"`
	Workspace                 *Workspace               `json:"workspace,omitempty"`
	Workspaces                *WorkspacesConnection    `json:"workspaces,omitempty"`
	WorkspacesList            *[]Workspace             `json:"workspacesList,omitempty"`
}

type TransferOrganizationBillingContactPayload struct {
	ClientMutationId *String            `json:"clientMutationId,omitempty"`
	Organization     *Organization      `json:"organization,omitempty"`
	OrganizationEdge *OrganizationsEdge `json:"organizationEdge,omitempty"`
	Query            *Query             `json:"query,omitempty"`
}

type TransferOrganizationOwnershipPayload struct {
	ClientMutationId *String            `json:"clientMutationId,omitempty"`
	Organization     *Organization      `json:"organization,omitempty"`
	OrganizationEdge *OrganizationsEdge `json:"organizationEdge,omitempty"`
	Query            *Query             `json:"query,omitempty"`
}

type UpdateNotePayload struct {
	ClientMutationId *String    `json:"clientMutationId,omitempty"`
	Note             *Note      `json:"note,omitempty"`
	NoteEdge         *NotesEdge `json:"noteEdge,omitempty"`
	Query            *Query     `json:"query,omitempty"`
	User             *User      `json:"user,omitempty"`
}

type UpdateOrganizationPayload struct {
	ClientMutationId *String            `json:"clientMutationId,omitempty"`
	Organization     *Organization      `json:"organization,omitempty"`
	OrganizationEdge *OrganizationsEdge `json:"organizationEdge,omitempty"`
	Query            *Query             `json:"query,omitempty"`
}

type UpdateUserPayload struct {
	ClientMutationId *String    `json:"clientMutationId,omitempty"`
	Query            *Query     `json:"query,omitempty"`
	User             *User      `json:"user,omitempty"`
	UserEdge         *UsersEdge `json:"userEdge,omitempty"`
}

type UpdateWorkspacePayload struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	Query            *Query  `json:"query,omitempty"`
}

type User struct {
	AvatarUrl                   *String                           `json:"avatarUrl,omitempty"`
	CreatedAt                   Datetime                          `json:"createdAt"`
	HasPassword                 *Boolean                          `json:"hasPassword,omitempty"`
	ID                          UUID                              `json:"id"`
	IsAdmin                     Boolean                           `json:"isAdmin"`
	IsVerified                  Boolean                           `json:"isVerified"`
	Name                        *String                           `json:"name,omitempty"`
	Notes                       NotesConnection                   `json:"notes"`
	NotesList                   *[]Note                           `json:"notesList,omitempty"`
	OrganizationMemberships     OrganizationMembershipsConnection `json:"organizationMemberships"`
	OrganizationMembershipsList *[]OrganizationMembership         `json:"organizationMembershipsList,omitempty"`
	UpdatedAt                   Datetime                          `json:"updatedAt"`
	UserAuthenticationsList     *[]UserAuthentication             `json:"userAuthenticationsList,omitempty"`
	UserEmails                  UserEmailsConnection              `json:"userEmails"`
	UserEmailsList              *[]UserEmail                      `json:"userEmailsList,omitempty"`
	Username                    String                            `json:"username"`
	Workspaces                  WorkspacesConnection              `json:"workspaces"`
	WorkspacesList              *[]Workspace                      `json:"workspacesList,omitempty"`
}

type UserAuthentication struct {
	CreatedAt  Datetime `json:"createdAt"`
	ID         UUID     `json:"id"`
	Identifier String   `json:"identifier"`
	Service    String   `json:"service"`
	UpdatedAt  Datetime `json:"updatedAt"`
	User       *User    `json:"user,omitempty"`
	UserId     UUID     `json:"userId"`
}

type UserEmail struct {
	CreatedAt  Datetime `json:"createdAt"`
	Email      String   `json:"email"`
	ID         UUID     `json:"id"`
	IsPrimary  Boolean  `json:"isPrimary"`
	IsVerified Boolean  `json:"isVerified"`
	UpdatedAt  Datetime `json:"updatedAt"`
	User       *User    `json:"user,omitempty"`
	UserId     UUID     `json:"userId"`
}

type UserEmailsConnection struct {
	Edges      *[]UserEmailsEdge `json:"edges,omitempty"`
	Nodes      *[]UserEmail      `json:"nodes,omitempty"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount Int               `json:"totalCount"`
}

type UserEmailsEdge struct {
	Cursor *Cursor   `json:"cursor,omitempty"`
	Node   UserEmail `json:"node"`
}

type UsersEdge struct {
	Cursor *Cursor `json:"cursor,omitempty"`
	Node   User    `json:"node"`
}

type UserSubscriptionPayload struct {
	Event *String `json:"event,omitempty"`
	User  *User   `json:"user,omitempty"`
}

type VerifyEmailPayload struct {
	ClientMutationId *String  `json:"clientMutationId,omitempty"`
	Query            *Query   `json:"query,omitempty"`
	Success          *Boolean `json:"success,omitempty"`
}

type VerifyTokenPayload struct {
	Verified Boolean `json:"verified"`
}

type Workspace struct {
	GitpodWorkspaceId String   `json:"gitpodWorkspaceId"`
	LastUpdatedTs     Datetime `json:"lastUpdatedTs"`
	User              *User    `json:"user,omitempty"`
	UserId            UUID     `json:"userId"`
	WorkspaceData     JSON     `json:"workspaceData"`
}

type WorkspaceKeepalivePayload struct {
	ClientMutationId *String `json:"clientMutationId,omitempty"`
	Query            *Query  `json:"query,omitempty"`
}

type WorkspacesConnection struct {
	Edges      *[]WorkspacesEdge `json:"edges,omitempty"`
	Nodes      *[]Workspace      `json:"nodes,omitempty"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount Int               `json:"totalCount"`
}

type WorkspacesEdge struct {
	Cursor *Cursor   `json:"cursor,omitempty"`
	Node   Workspace `json:"node"`
}
